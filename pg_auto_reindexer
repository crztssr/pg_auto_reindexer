#!/bin/bash
# Author: Vitaliy Kukharik (vitabaks@gmail.com)
# Title: /usr/bin/pg_auto_reindexer - Automatic reindexing of B-tree indexes

version=1.2

while getopts ":-:" optchar; do
    [[ "${optchar}" == "-" ]] || continue
    case "${OPTARG}" in
        pghost=* )
            PGHOST=${OPTARG#*=}
            ;;
        pgport=* )
            PGPORT=${OPTARG#*=}
            ;;
        dbname=* )
            DBNAME=${OPTARG#*=}
            ;;
        dbuser=* )
            DBUSER=${OPTARG#*=}
            ;;
        index_bloat=* )
            INDEX_BLOAT=${OPTARG#*=}
            ;;
        index_minsize=* )
            INDEX_MINSIZE=${OPTARG#*=}
            ;;
        index_maxsize=* )
            INDEX_MAXSIZE=${OPTARG#*=}
            ;;
        bloat_search_method=* )
            BLOAT_SEARCH_METHOD=${OPTARG#*=}
            ;;
        maintenance_start=* )
            MAINTENANCE_START=${OPTARG#*=}
            ;;
        maintenance_stop=* )
            MAINTENANCE_STOP=${OPTARG#*=}
            ;;
    esac
done

function help(){
echo -e "
$(basename "$0") - Automatic reindexing of B-tree indexes

\e[1m--pghost=\e[0m
        PostgreSQL host (default: /var/run/postgresql)

\e[1m--pgport=\e[0m
        PostgreSQL port (default: 5432)

\e[1m--dbname=\e[0m
        PostgreSQL database (default: all databases)

\e[1m--dbuser=\e[0m
        PostgreSQL database user name (default: postgres)

\e[1m--index_bloat=\e[0m
        Index bloat in % (default: 30)

\e[1m--index_minsize=\e[0m
        Minimum index size in MB (default: 1)
        Exclude indexes less than specified size

\e[1m--index_maxsize=\e[0m
        Maximum index size in MB (default: 1000000)
        Exclude indexes larger than specified size

\e[1m--maintenance_start=\e[0mHHMM \e[1m--maintenance_stop=\e[0mHHMM
        Determine the time range of the maintenance window (24 hour format: %H%M) [ optional ]
        Example: 2200 (22 hours 00 minutes)

\e[1m--bloat_search_method=\e[0m
        estimate - index bloat estimation (default)
        pgstattuple - use pgstattuple extension to search bloat indexes (could cause I/O spikes) [ optional ]

-h, --help
        show this help, then exit

-V, --version
        output version information, then exit


\e[33mEXAMPLES:\e[0m

    # $(basename "$0") --index_bloat=20 --index_maxsize=5000 --maintenance_start=0100 --maintenance_stop=0600


Dependencies:
    postgresql-<version>-repack package (for postgresql <= 11)
"
exit
}
[ "$1" = "-v" ] || [ "$1" = "-V" ] || [ "$1" = "-version" ] || [ "$1" = "--version" ] && echo "$(basename "$0") v${version}" && exit
[ "$1" = "-h" ] || [ "$1" = "help" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ] && help

function info(){
    msg="$1"
    echo -e "$(date "+%F %T") INFO: $msg"
    logger -p user.notice -t "$(basename "$0")" "$msg"
}
function warnmsg(){
    msg="$1"
    echo -e "$(date "+%F %T") \e[33mWARN:\e[0m $msg"
    logger -p user.notice -t "$(basename "$0")" "$msg"
    return 1
}
function errmsg(){
    msg="$1"
    echo -e "$(date "+%F %T") \e[91mERROR:\e[0m $msg"
    logger -p user.error -t "$(basename "$0")" "$msg"
    exit 1
}

if [[ -z $PGHOST ]]; then PGHOST="/var/run/postgresql"; fi
if [[ -z $PGPORT ]]; then PGPORT="5432"; fi
if [[ -z $DBUSER ]]; then DBUSER="postgres"; fi
if [[ -z $DBNAME ]]; then if ! DBNAME=$(psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d postgres -tAc "select datname from pg_database where not datistemplate"); then errmsg "Unable to connect to database postgres on ${PGHOST}:${PGPORT} ";exit 1;fi; fi
if [[ -z $INDEX_BLOAT ]]; then INDEX_BLOAT="30"; fi
if [[ -z $BLOAT_SEARCH_METHOD ]]; then BLOAT_SEARCH_METHOD="estimate"; fi
if [[ -z $INDEX_MINSIZE ]]; then INDEX_MINSIZE_BYTES="1000000"; else INDEX_MINSIZE_BYTES=$(( INDEX_MINSIZE * 1000*1000 ));fi
if [[ -z $INDEX_MAXSIZE ]]; then INDEX_MAXSIZE="1000000"; fi
INDEX_MAXSIZE_BYTES=$(( INDEX_MAXSIZE * 1000*1000 ))

PG_VERSION=$(psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d $(echo ${DBNAME}|awk '{print $1}') -tAXc "select setting::integer/10000 from pg_settings where name = 'server_version_num'")

function pg_isready(){
    if ! psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d $(echo ${DBNAME}|awk '{print $1}') -tAXc "select 1" 1> /dev/null; then
        errmsg "PostgreSQL server ${PGHOST}:${PGPORT} no response"
    else
    # in recovery mode?
    state=$(psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d $(echo ${DBNAME}|awk '{print $1}') -tAXc 'SELECT pg_is_in_recovery()') 2>/dev/null
        if [ "$state" = "t" ]; then
        warnmsg "This server is in recovery mode. Index maintenance will not be performed on that server."
        exit
        fi
    fi
}

function create_extension_pgstattuple(){
    if [[ "${BLOAT_SEARCH_METHOD}" = "pgstattuple" ]]; then
        psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d "$db" -tAXc "create extension if not exists pgstattuple;" &>/dev/null
    fi
}

function create_extension_pg_repack(){
    psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d "$db" -tAXc "create extension if not exists pg_repack" &>/dev/null
}

function maintenance_window(){
    if [ -n "${MAINTENANCE_START}" ] && [ -n "${MAINTENANCE_STOP}" ]; then
        currentTime=$(date "+%H%M")
        if [ "$currentTime" -lt "${MAINTENANCE_START}" ] || [ "$currentTime" -gt "${MAINTENANCE_STOP}" ]; then
            warnmsg "Current time: $(date "+%R %Z"). This is outside of the maintenance window: $(date --date="${MAINTENANCE_START}" "+%R")-$(date --date="${MAINTENANCE_STOP}" "+%R"). Exit."
            exit
        fi
    fi
}


if [[ "${BLOAT_SEARCH_METHOD}" = "pgstattuple" ]]; then
# Based on https://github.com/dataegret/pg-utils/blob/master/sql/index_bloat.sql
INDEX_BLOAT_SQL="
with indexes as (
    select * from pg_stat_user_indexes
)
select quote_ident(schemaname)||'.'||quote_ident(indexrelname) as index_full_name
from (
    select schemaname, indexrelname,
    (select (case when avg_leaf_density = 'NaN' then 0
        else greatest(ceil(index_size * (1 - avg_leaf_density / (coalesce((SELECT (regexp_matches(reloptions::text, E'.*fillfactor=(\\d+).*'))[1]),'90')::real)))::bigint, 0) end)
        from pgstatindex(p.indexrelid::regclass::text)
    ) as free_space,
    pg_relation_size(p.indexrelid) as index_size
    from indexes p
    join pg_class c on p.indexrelid = c.oid
    join pg_index i on i.indexrelid = p.indexrelid
    where pg_get_indexdef(p.indexrelid) like '%USING btree%'
    and i.indisvalid and c.relpersistence = 'p'
    and pg_relation_size(p.indexrelid) >= ${INDEX_MINSIZE_BYTES}
    and pg_relation_size(p.indexrelid) <= ${INDEX_MAXSIZE_BYTES}
    and schemaname <> 'pg_catalog' --exclude system catalog
) t
where round((free_space*100/index_size)::numeric, 1) >= ${INDEX_BLOAT}
order by index_size asc;
"

elif [[ "${BLOAT_SEARCH_METHOD}" = "estimate" ]]; then
# Based on https://github.com/ioguix/pgsql-bloat-estimation/blob/master/btree/btree_bloat.sql
INDEX_BLOAT_SQL="
with bloat_indexes as (
SELECT quote_ident(nspname)||'.'||quote_ident(idxname) as index_full_name,
  bs*(relpages)::bigint AS index_size,
  round((100 * (relpages-est_pages_ff)::float / relpages)::numeric, 1) AS bloat_ratio
FROM (
  SELECT coalesce(1 +
         ceil(reltuples/floor((bs-pageopqdata-pagehdr)/(4+nulldatahdrwidth)::float)), 0 -- ItemIdData size + computed avg size of a tuple (nulldatahdrwidth)
      ) AS est_pages,
      coalesce(1 +
         ceil(reltuples/floor((bs-pageopqdata-pagehdr)*fillfactor/(100*(4+nulldatahdrwidth)::float))), 0
      ) AS est_pages_ff,
      bs, nspname, tblname, idxname, relpages, fillfactor, is_na
  FROM (
      SELECT maxalign, bs, nspname, tblname, idxname, reltuples, relpages, idxoid, fillfactor,
            ( index_tuple_hdr_bm +
                maxalign - CASE -- Add padding to the index tuple header to align on MAXALIGN
                  WHEN index_tuple_hdr_bm%maxalign = 0 THEN maxalign
                  ELSE index_tuple_hdr_bm%maxalign
                END
              + nulldatawidth + maxalign - CASE -- Add padding to the data to align on MAXALIGN
                  WHEN nulldatawidth = 0 THEN 0
                  WHEN nulldatawidth::integer%maxalign = 0 THEN maxalign
                  ELSE nulldatawidth::integer%maxalign
                END
            )::numeric AS nulldatahdrwidth, pagehdr, pageopqdata, is_na
      FROM (
          SELECT n.nspname, i.tblname, i.idxname, i.reltuples, i.relpages,
              i.idxoid, i.fillfactor, current_setting('block_size')::numeric AS bs,
              CASE -- MAXALIGN: 4 on 32bits, 8 on 64bits (and mingw32 ?)
                WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8
                ELSE 4
              END AS maxalign,
              /* per page header, fixed size: 20 for 7.X, 24 for others */
              24 AS pagehdr,
              /* per page btree opaque data */
              16 AS pageopqdata,
              /* per tuple header: add IndexAttributeBitMapData if some cols are null-able */
              CASE WHEN max(coalesce(s.null_frac,0)) = 0
                  THEN 2 -- IndexTupleData size
                  ELSE 2 + (( 32 + 8 - 1 ) / 8) -- IndexTupleData size + IndexAttributeBitMapData size ( max num filed per index + 8 - 1 /8)
              END AS index_tuple_hdr_bm,
              /* data len: we remove null values save space using it fractionnal part from stats */
              sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 1024)) AS nulldatawidth,
              max( CASE WHEN i.atttypid = 'pg_catalog.name'::regtype THEN 1 ELSE 0 END ) > 0 AS is_na
          FROM (
              SELECT ct.relname AS tblname, ct.relnamespace, ic.idxname, ic.attpos, ic.indkey, ic.indkey[ic.attpos], ic.reltuples, ic.relpages, ic.tbloid, ic.idxoid, ic.fillfactor,
                  coalesce(a1.attnum, a2.attnum) AS attnum, coalesce(a1.attname, a2.attname) AS attname, coalesce(a1.atttypid, a2.atttypid) AS atttypid,
                  CASE WHEN a1.attnum IS NULL
                  THEN ic.idxname
                  ELSE ct.relname
                  END AS attrelname
              FROM (
                  SELECT idxname, reltuples, relpages, tbloid, idxoid, fillfactor, indkey,
                      pg_catalog.generate_series(1,indnatts) AS attpos
                  FROM (
                      SELECT ci.relname AS idxname, ci.reltuples, ci.relpages, i.indrelid AS tbloid,
                          i.indexrelid AS idxoid,
                          coalesce(substring(
                              array_to_string(ci.reloptions, ' ')
                              from 'fillfactor=([0-9]+)')::smallint, 90) AS fillfactor,
                          i.indnatts,
                          pg_catalog.string_to_array(pg_catalog.textin(
                              pg_catalog.int2vectorout(i.indkey)),' ')::int[] AS indkey
                      FROM pg_catalog.pg_index i
                      JOIN pg_catalog.pg_class ci ON ci.oid = i.indexrelid
                      WHERE ci.relam=(SELECT oid FROM pg_am WHERE amname = 'btree')
                      AND ci.relpages > 0
                  ) AS idx_data
              ) AS ic
              JOIN pg_catalog.pg_class ct ON ct.oid = ic.tbloid
              LEFT JOIN pg_catalog.pg_attribute a1 ON
                  ic.indkey[ic.attpos] <> 0
                  AND a1.attrelid = ic.tbloid
                  AND a1.attnum = ic.indkey[ic.attpos]
              LEFT JOIN pg_catalog.pg_attribute a2 ON
                  ic.indkey[ic.attpos] = 0
                  AND a2.attrelid = ic.idxoid
                  AND a2.attnum = ic.attpos
            ) i
            JOIN pg_catalog.pg_namespace n ON n.oid = i.relnamespace
            JOIN pg_catalog.pg_stats s ON s.schemaname = n.nspname
                                      AND s.tablename = i.attrelname
                                      AND s.attname = i.attname
            WHERE schemaname <> 'pg_catalog' --exclude system catalog
            GROUP BY 1,2,3,4,5,6,7,8,9,10,11
      ) AS rows_data_stats
  ) AS rows_hdr_pdg_stats
) AS relation_stats
WHERE bs*(relpages)::bigint >= ${INDEX_MINSIZE_BYTES}
AND bs*(relpages)::bigint <= ${INDEX_MAXSIZE_BYTES}
AND round((100 * (relpages-est_pages_ff)::float / relpages)::numeric, 1) >= ${INDEX_BLOAT}
ORDER BY index_size ASC
)
select index_full_name from bloat_indexes;
"
fi


# SET PGOPTIONS
PGOPTIONS="-c statement_timeout=0 -c lock_timeout=10s"
# disable parallel maintenance workers
if [[ $PG_VERSION -ge 11 ]]; then
PGOPTIONS+=" -c max_parallel_maintenance_workers=0"
fi

# Check current time
maintenance_window

# REINDEX
for db in $DBNAME; do
    if pg_isready; then
    create_extension_pgstattuple
    info "Start index maintenance for database: $db"
        bloat_indexes=$(psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d "$db" -tAXc "$INDEX_BLOAT_SQL")
        if [ -z "$bloat_indexes" ];
        then
            info "... no bloat indexes were found"
        else
            # if postgres <= 11 use pg_repack
            if [[ $PG_VERSION -le 11 ]]; then
                create_extension_pg_repack
                for index in $bloat_indexes; do
                    pg_isready
                    maintenance_window
                    info "repack index $index"
                    if ! bash -c "PGOPTIONS=\"${PGOPTIONS}\"; pg_repack -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d $db -i '$index' --elevel=ERROR";
                    then
                        errmsg "Index maintenance for database: $db - Failed"
                    fi
                    # check for invalid temporary indexes with the suffix "index_"
                    invalid_index=$(psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d "$db" -tAXc "SELECT string_agg(quote_ident(schemaname)||'.'||quote_ident(indexrelname), ', ') FROM pg_stat_user_indexes sui JOIN pg_index i USING (indexrelid) WHERE NOT indisvalid AND indexrelname like 'index_%'")
                    if [ -n "$invalid_index" ]; then
                        warnmsg "A temporary index apparently created by pg_repack has been left behind, and we do not want to risk dropping this index ourselves. If the index was in fact created by an old pg_repack job which didn't get cleaned up, you should just use DROP INDEX CONCURRENTLY and try the pg_auto_reindexer again."
                        warnmsg "invalid indexes: $invalid_index"

                        errmsg "Index maintenance for database: $db - Failed"
                    fi
                sleep 2s
                done
            # if postgres >= 12 use reindex concurrently
            elif [[ $PG_VERSION -ge 12 ]]; then
                for index in $bloat_indexes; do
                    pg_isready
                    maintenance_window
                    info "reindex index $index"
                    if ! bash -c "PGOPTIONS=\"${PGOPTIONS}\"; psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d $db -tAXc 'REINDEX INDEX CONCURRENTLY $index' 1> /dev/null";
                    then
                        # If the index marked INVALID is suffixed ccnew, then it corresponds to the transient index created during the concurrent operation, and the recommended recovery method is to drop it using DROP INDEX 
                        invalid_index=$(psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d "$db" -tAXc "SELECT quote_ident(schemaname)||'.'||quote_ident(indexrelname) as invalid_index FROM pg_stat_user_indexes sui JOIN pg_index i USING (indexrelid) WHERE NOT indisvalid AND quote_ident(schemaname)||'.'||quote_ident(indexrelname) = '${index}_ccnew'")
                        if [ -n "$invalid_index" ]; then
                            warnmsg "... drop invalid index $invalid_index"
                            if ! bash -c "PGOPTIONS=\"${PGOPTIONS}\" psql -h ${PGHOST} -p ${PGPORT} -U ${DBUSER} -d $db -tAXc 'DROP INDEX CONCURRENTLY $invalid_index' 1> /dev/null";
                            then
                                warnmsg "... failed to drop invalid index $invalid_index"
                                warnmsg "The index marked INVALID with the suffixed ccnew corresponds to the transient index created during the concurrent operation, and the recommended recovery method is to drop it using DROP INDEX CONCURRENTLY and try the pg_auto_reindexer again."
                            fi
                        fi
                        warnmsg "failed to reindex index $index"
                        errmsg "Index maintenance for database: $db - Failed"
                    fi
                sleep 2s
                done
            fi
            info "Index maintenance for database: $db - Completed"
        fi
    fi
done

exit
